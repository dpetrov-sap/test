name: Go CI/CD pipeline

on: 
  pull_request:
  push:
    branches:
      - main 

jobs:
  build-test-sonarqube:
    runs-on: ubuntu-latest

    

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repo
        uses: actions/checkout@v4
    

      # Step 2: Set up Go
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      # Step 3: Cache Go modules
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # Step 4: Install dependencies
      - name: Install dependencies
        run: go mod tidy

      # Step 5: Lint
      - name: Run Go Linter
        uses: golangci/golangci-lint-action@v7
        with:
          version: latest


  unit_tests:
     runs-on: ubuntu-latest
     needs: build-test-sonarqube
     steps:
      - uses: actions/checkout@v3
      - name: Set up GO 
        uses: actions/setup-go@v4
        with:
          go-version: 1.24

      - name: Run unit tests and generate unit coverage report
        run: |
          mkdir -p test-results
           
          go test -coverprofile=test-results/unit.coverage.out -covermode=atomic ./...

      - name: Upload unit tests
        uses: actions/upload-artifact@v4
        with: 
          name: unit-coverage
          path: test-results/unit.coverage.out
          

  integration_tests:
     runs-on: ubuntu-latest
     needs: [build-test-sonarqube, unit_tests]
     steps:
      - name: Checkout code 
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.24

      - name: Download unit coverage
        uses: actions/download-artifact@v4
        with:
          name: unit-coverage
          path: test-results/

      - name: Run integration tests with coverage
        run: |
          mkdir -p test-results
          export INTEGRATION=true
          go test -coverprofile=test-results/integration.coverage.out -covermode=atomic ./... -run="^TestIntegration"
          echo "mode:atomic" > test-results/combined.coverage.out
          tail -n +2 test-results/unit.coverage.out >> test-results/combined.coverage.out
          tail -n +2 test-results/integration.coverage.out >> test-results/combined.coverage.out

        
        

      - name: Set up SonarCloud
        uses: SonarSource/sonarqube-scan-action@v4
        env: 
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with: 
          args: > 
             -Dsonar.projectKey=dpetrov-sap_ums
             -Dsonar.organization=dpetrov-sap

       

 
  docker_build:
    runs-on: ubuntu-latest
    needs: [unit_tests, integration_tests]
    
    steps:
      - uses: actions/checkout@v3

      - name: Build Docker image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        
        run: docker build -t ghcr.io/${{ github.repository_owner }}/go-hello-world:${{ github.sha }} .

      # Step 10: Login to GHCR
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      # Step 11: Push Docker image
      - name: Push Docker image
        if: github.ref == 'refs/heads/main'
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/go-hello-world:${{ github.sha }}
