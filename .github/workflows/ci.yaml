name: Go CI/CD pipeline

on: [push, pull_request]
  

jobs:
  build-test-sonarqube:
    runs-on: ubuntu-latest

    
    steps:
      # Step 1: Checkout the repository
      - name: Checkout repo
        uses: actions/checkout@v4

      # Step 2: Set up Go environment
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.20'

      - name: Cache Go modules 
        uses: actions/cache@v3
        with: 
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: | 
             ${{ runner.os }}-go-
       

      - name: Install Dependencies
        run: go mod tidy
        

  
      - name: Run Go Linter
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
    

      - name: Run unit + integration tests 
        run: |
           mkdir -p test-results
           go test -coverprofile=coverage.out ./...

      - name: Setup Sonarqube
        uses: warchant/setup-sonarqube@v1
        with: 
          sonarqube-version: "9.9.8-communty"

      - name: Wait for Sonarqube to be ready
        run: |
           echo "Waiting for SonarQube to be UP..."
           until curl -s http://localhost:9000/api/system/health | grep -q '"status":"UP"'; do
              sleep 5
           done
           echo "SonarQube is UP"
        
      - name: Download SonarScanner
        run: |
         wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.306-linux.zip
         unzip sonar-scanner-cli-5.0.1.3006-linux.zip
         mv sonar-scanner-5.0.1.3006-linux sonar-scanner

      - name: Run SonarScanner Analysis
        env: 
          SONAR_TOKEN: admin
        run: |
           ./sonar-scanner/bin/sonar-scanner \
             -Dsonar.projectKey=hello-go \
             -Dsonar.sources=. \
             -Dsonar.host.url=http://localhost:9000 \
             -Dsonar.login=admin \
             -Dsonar.password=admin \
             Dsonar.go.coverage.reportPath=coverage.out

      # Step 5: Build Docker image
      - name: Build Docker image
        run: docker build -t ghcr.io/${{ github.actor }}/go-hello-world:${{ github.sha }} .

           # Step 6: Log in to GitHub Container Registry using Personal Access Token (PAT)
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
             registry: ghcr.io  # ðŸ”¹ Specify GHCR instead of Docker Hub
             username: ${{ github.actor }}
             password: ${{ secrets.GHCR_PAT }}  # Ensure this secret exists
   

      # Push Docker image to GitHub Container Registry
      - name: Push Docker image to GitHub Container Registry
        run: |
           docker push ghcr.io/${{ github.repository_owner }}/go-hello-world:${{ github.sha }}   

